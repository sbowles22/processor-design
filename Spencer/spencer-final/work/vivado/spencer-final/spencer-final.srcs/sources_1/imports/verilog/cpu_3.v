/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module cpu_3 (
    input clk,
    input rst,
    output reg write,
    input start,
    output reg [7:0] address,
    output reg [11:0] dout,
    input [9:0] x,
    input [9:0] y,
    output reg [9:0] xo,
    output reg [9:0] yo,
    input recieved,
    output reg ready
  );
  
  
  
  reg [127:0] M_reg_d, M_reg_q = 1'h0;
  reg M_halt_d, M_halt_q = 1'h1;
  reg M_ready_state_d, M_ready_state_q = 1'h1;
  reg [9:0] M_x_keep_d, M_x_keep_q = 1'h0;
  reg [9:0] M_y_keep_d, M_y_keep_q = 1'h0;
  
  wire [16-1:0] M_instRom_inst;
  reg [8-1:0] M_instRom_address;
  instRom_9 instRom (
    .address(M_instRom_address),
    .inst(M_instRom_inst)
  );
  
  reg [3:0] op;
  
  reg [3:0] arg1;
  
  reg [3:0] arg2;
  
  reg [3:0] dest;
  
  reg [7:0] constant;
  
  always @* begin
    M_halt_d = M_halt_q;
    M_reg_d = M_reg_q;
    M_ready_state_d = M_ready_state_q;
    M_y_keep_d = M_y_keep_q;
    M_x_keep_d = M_x_keep_q;
    
    write = 1'h0;
    address = 8'bxxxxxxxx;
    dout = 8'bxxxxxxxx;
    ready = M_ready_state_q;
    M_instRom_address = M_reg_q[0+7-:8];
    M_reg_d[0+7-:8] = M_reg_q[0+7-:8] + ~M_halt_q;
    op = M_instRom_inst[12+3-:4];
    dest = M_instRom_inst[8+3-:4];
    arg1 = M_instRom_inst[4+3-:4];
    arg2 = M_instRom_inst[0+3-:4];
    constant = M_instRom_inst[0+7-:8];
    if (start) begin
      M_reg_d[0+7-:8] = 1'h0;
      M_reg_d[112+7-:8] = x[2+7-:8];
      M_reg_d[120+7-:8] = y[2+7-:8];
      M_x_keep_d = x;
      M_y_keep_d = y;
      M_halt_d = 1'h0;
      M_ready_state_d = 1'h0;
    end
    if (recieved) begin
      M_ready_state_d = 1'h1;
    end
    xo = M_x_keep_q;
    yo = M_y_keep_q;
    
    case (op)
      4'h1: begin
        write = 1'h1;
        dout = {M_reg_q[88+0+3-:4], M_reg_q[96+0+3-:4], M_reg_q[104+0+3-:4]};
        M_halt_d = 1'h1;
      end
      4'h2: begin
        write = 1'h1;
        dout = M_reg_q[(dest)*8+7-:8];
        address = M_reg_q[(arg1)*8+7-:8] + arg2;
      end
      4'h3: begin
        M_reg_d[(dest)*8+7-:8] = constant;
      end
      4'h4: begin
        M_reg_d[(dest)*8+7-:8] = M_reg_q[(arg1)*8+7-:8] < M_reg_q[(arg2)*8+7-:8];
      end
      4'h5: begin
        M_reg_d[(dest)*8+7-:8] = M_reg_q[(arg1)*8+7-:8] == M_reg_q[(arg2)*8+7-:8];
      end
      4'h6: begin
        if (M_reg_q[(dest)*8+7-:8] == constant) begin
          M_reg_d[0+7-:8] = M_reg_q[0+7-:8] + 2'h2;
        end
      end
      4'h7: begin
        if (M_reg_q[(dest)*8+7-:8] != constant) begin
          M_reg_d[0+7-:8] = M_reg_q[0+7-:8] + 2'h2;
        end
      end
      4'h8: begin
        M_reg_d[(dest)*8+7-:8] = M_reg_q[(arg1)*8+7-:8] + M_reg_q[(arg2)*8+7-:8];
      end
      4'h9: begin
        M_reg_d[(dest)*8+7-:8] = M_reg_q[(arg1)*8+7-:8] - M_reg_q[(arg2)*8+7-:8];
      end
      4'ha: begin
        M_reg_d[(dest)*8+7-:8] = M_reg_q[(arg1)*8+7-:8] << M_reg_q[(arg2)*8+7-:8];
      end
      4'hb: begin
        M_reg_d[(dest)*8+7-:8] = M_reg_q[(arg1)*8+7-:8] >> M_reg_q[(arg2)*8+7-:8];
      end
      4'hc: begin
        M_reg_d[(dest)*8+7-:8] = M_reg_q[(arg1)*8+7-:8] & M_reg_q[(arg2)*8+7-:8];
      end
      4'hd: begin
        M_reg_d[(dest)*8+7-:8] = M_reg_q[(arg1)*8+7-:8] | M_reg_q[(arg2)*8+7-:8];
      end
      4'he: begin
        M_reg_d[(dest)*8+7-:8] = ~M_reg_q[(arg1)*8+7-:8];
      end
      4'hf: begin
        M_reg_d[(dest)*8+7-:8] = M_reg_q[(arg1)*8+7-:8] ^ M_reg_q[(arg2)*8+7-:8];
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_reg_q <= 1'h0;
      M_halt_q <= 1'h1;
      M_ready_state_q <= 1'h1;
      M_x_keep_q <= 1'h0;
      M_y_keep_q <= 1'h0;
    end else begin
      M_reg_q <= M_reg_d;
      M_halt_q <= M_halt_d;
      M_ready_state_q <= M_ready_state_d;
      M_x_keep_q <= M_x_keep_d;
      M_y_keep_q <= M_y_keep_d;
    end
  end
  
endmodule
