global InOut {
  // Addresses for non-general-purpous ram
  const DIP0_ADDR = 8hF7; // Dip switches
  const DIP1_ADDR = 8hF8;
  const DIP2_ADDR = 8hF9;
  const LED0_ADDR = 8hFA; // LED Lights
  const LED1_ADDR = 8hFB;
  const LED2_ADDR = 8hFC;
  const BTNS_ADDR = 8hFD; // 5 IO Buttons (not rst)
  const HX7L_ADDR = 8hFE; // Left  2 hex digits on 7 segment display
  const HX7R_ADDR = 8hFF; // Right 2 hex digits on 7 segment display
}

module au_plus_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output color[3][4],     // Color of pixel sent to VGA
    output h_sync,
    output v_sync
    // output io_led [3][8],   // LEDs on IO Shield
    // output io_seg [8],      // 7-segment LEDs on IO Shield
    // output io_sel [4],      // Digit select on IO Shield
    // input io_button [5],    // 5 buttons on IO Shield
    // input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {
      ind_sta_vga_timer timer;
      cpu cpu0;        // our snazzy CPU
      cpu cpu1;        // our second snazzy CPU
    }
  }
  
  arbiter n (#WIDTH(2));
  arbiter o (#WIDTH(2));
  
  .rst(rst) {
    vga_screen_counter vga_screen_counter;
  }
  
  .rclk(clk), .wclk(clk) {
    simple_dual_ram frame_buffer(#DEPTH(1048576), #SIZE(12));
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    vga_screen_counter.clk = clk && (cpu0.ready || cpu1.ready);
    
    led = 8h00;             // turn LEDs off
    //cpu0.din = 8hxx;           // default to don't care
    //cpu1.din = 8hxx;           // default to don't care

    n.in = c{cpu1.ready, cpu0.ready};
    cpu0.start = 0;
    cpu1.start = 0;
    cpu0.x = 0;
    cpu0.y = 0;
    cpu1.x = 0;
    cpu1.y = 0;
    
    if (n.out[0]) {
      cpu0.x = vga_screen_counter.x;
      cpu0.y = vga_screen_counter.y;
      cpu0.start = 1;
    }
    if (n.out[1]) {
      cpu1.x = vga_screen_counter.x;
      cpu1.y = vga_screen_counter.y;
      cpu1.start = 1;
    }
    
    o.in = c{cpu1.write, cpu0.write};
    cpu0.recieved = 0;
    cpu1.recieved = 0;
    frame_buffer.write_en = 0;
    frame_buffer.waddr = 20hxxxxx;
    frame_buffer.write_data = 0;
    
    if (o.out[0]) {
      frame_buffer.write_en = 1;
      frame_buffer.waddr = c{cpu0.yo, cpu0.xo};
      frame_buffer.write_data = cpu0.dout; 
      cpu0.recieved = 1;
    }
    if (o.out[1]) {
      frame_buffer.write_en = 1;
      frame_buffer.waddr = c{cpu1.yo, cpu1.xo};
      frame_buffer.write_data = cpu1.dout;
      cpu1.recieved = 1;
    }
    
    frame_buffer.raddr = c{timer.y, timer.x};
    color = {
      frame_buffer.read_data[11:8], 
      frame_buffer.read_data[7:4], 
      frame_buffer.read_data[3:0]
      };
    h_sync = timer.h_sync;
    v_sync = timer.v_sync;
    led[2] = timer.h_sync;
    led[6] = timer.v_sync;
    
    usb_tx = usb_rx;        // echo the serial data
  }
}