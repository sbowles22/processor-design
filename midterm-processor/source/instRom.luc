
module instRom (
    input address[8],
    output inst[16]
  ) {

  always {
    inst = c{Inst.NOP, 12b0};

    case (address) {
      // begin:  

      0: inst = c{Inst.SET, 4d2, 8d0};
      // loop:

      1: inst = c{Inst.SET, 4d1, 8d128};
      2: inst = c{Inst.STORE, 4d2, 4d1, 4d0};
      3: inst = c{Inst.SET, 4d1, 8d1};
      4: inst = c{Inst.ADD, 4d2, 4d2, 4d1};
      5: inst = c{Inst.SET, 4d15, 8d1};
      6: inst = c{Inst.SET, 4d0, 8d7};
      // delay:

      7: inst = c{Inst.SET, 4d11, 8d0};
      8: inst = c{Inst.SET, 4d12, 8d0};
      9: inst = c{Inst.SET, 4d13, 8d0};
      10: inst = c{Inst.SET, 4d1, 8d1};
      // delay_loop:

      11: inst = c{Inst.ADD, 4d11, 4d11, 4d1};
      12: inst = c{Inst.BEQ, 4d11, 8d0};
      13: inst = c{Inst.SET, 4d0, 8d11};
      14: inst = c{Inst.ADD, 4d12, 4d12, 4d1};
      15: inst = c{Inst.BEQ, 4d12, 8d0};
      16: inst = c{Inst.SET, 4d0, 8d11};
      17: inst = c{Inst.ADD, 4d13, 4d13, 4d1};
      18: inst = c{Inst.BEQ, 4d13, 8d0};
      19: inst = c{Inst.SET, 4d0, 8d11};
      20: inst = c{Inst.SET, 4d1, 8d0};
      21: inst = c{Inst.ADD, 4d0, 4d15, 4d1};

    }
  }
}
